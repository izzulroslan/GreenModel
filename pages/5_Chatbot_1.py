import streamlit as st
import pandas as pd
from openai import OpenAI, OpenAIError
from codecarbon import EmissionsTracker
import random
from theme import apply_theme

# Streamlit Page Setup
st.set_page_config(page_title="Chatbot Carbon Emission Tracker", layout="centered")

apply_theme()

st.title("🌱 Chatbot Carbon Emission Tracker")
st.caption("🚀 A Streamlit chatbot powered by OpenAI + CodeCarbon tracking 🌱")

# User Guide in Expander
with st.expander("📘 Chatbot Carbon Emission Tracker User Guide"):
    st.markdown("""
    This app compares carbon emissions generated by two different AI model configurations when answering your question.

    **Steps to use:**
    1. 🔐 Enter your **OpenAI API Key** in the sidebar.
    2. 💬 Type your question in the **chat input** at the bottom of the screen.
    3. 📊 Wait for the two responses:
        - **Normal Model** (more creative, higher emissions)
        - **Green Model** (more efficient, deterministic)
    4. 🌍 View the estimated **CO₂ emissions** for each response.
    5. 📈 See a **bar chart** comparing emissions in the sidebar.

    ---
    **Tips:**
    - Use short, clear prompts for best results.
    - Try sustainability-related questions like:
        - "How can I reduce my home's carbon footprint?"
        - "What are green alternatives to air travel?"
        - "Explain carbon offsetting in simple terms."

    ✅ Use this app to explore how even digital choices can affect our environment!
    """)

# Sidebar Setup
with st.sidebar:
    openai_api_key = st.text_input("OpenAI API Key", key="chatbot_api_key", type="password")
    "[Get an OpenAI API key](https://platform.openai.com/account/api-keys)"

st.sidebar.title("🌍 Emissions Summary")

# Set up OpenAI client
client = None
if openai_api_key:
    try:
        client = OpenAI(api_key=openai_api_key)
        # Optional: test the key by sending a lightweight call
        client.models.list()  # Just to validate the key
    except OpenAIError:
        st.error("❌ Invalid OpenAI API key. Please double-check and try again.")
        client = None


# Chat input
prompt = st.chat_input("Ask something about carbon emissions...")

if prompt and not openai_api_key:
    st.warning("⚠️ Please enter your OpenAI API key in the sidebar to use the chatbot.")
    
if openai_api_key and prompt:
    with st.spinner("Generating responses and tracking emissions..."):
        try:
            MAX_TOKENS = 500

            # Tracker for temperature 1.0 (normal model)
            tracker_normal = EmissionsTracker(project_name="Temp 1.0")
            tracker_normal.start()
            response_normal = client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=1.0,
                max_tokens=MAX_TOKENS,
                presence_penalty=1.0,
                frequency_penalty=0.5
            )
            emissions_normal = tracker_normal.stop()

            # Tracker for temperature 0.2 (green model)
            tracker_greenmodel = EmissionsTracker(project_name="Temp 0.2")
            tracker_greenmodel.start()
            response_greenmodel = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.2,
                max_tokens=MAX_TOKENS,
            )
            emissions_greenmodel = tracker_greenmodel.stop()

            # Convert to grams
            emissions_normal_grams = emissions_normal * 1000
            emissions_greenmodel_grams = emissions_greenmodel * 1000


        except Exception as e:
            st.error(f"An error occurred: {e}")

        else:
            # Only display if no error
            st.subheader("📥 Your Prompt")
            st.code(prompt, language="markdown")

            st.subheader("Results")
            st.write("### 🟣 Response with Normal Model:")
            st.info(response_normal.choices[0].message.content)
            st.write(f"🌍 Emissions for Normal Model: `{emissions_normal_grams:.4f} grams CO₂`")

            st.write("---")

            st.write("### 🔵 Response with Green Model:")
            st.success(response_greenmodel.choices[0].message.content)
            st.write(f"🌍 Emissions for Green Model: `{emissions_greenmodel_grams:.4f} grams CO₂`")

            # Sidebar Update
            with st.sidebar:
                st.metric(label="Emissions Normal Model", value=f"{emissions_normal_grams:.4f} g CO₂")
                st.metric(label="Emissions Green Model", value=f"{emissions_greenmodel_grams:.4f} g CO₂")
        

                st.write("---")
                st.write("📊 **Emission Comparison Chart**")
                df_emissions = pd.DataFrame({
                    "Model": ["Normal Model", "Green Model"],
                    "CO₂ Emissions (grams)": [emissions_normal_grams, emissions_greenmodel_grams]
                })
                st.bar_chart(df_emissions.set_index("Model"))

# Random Eco Tip or Fact
did_you_know_facts = [
    "🌱 It would take 45 billion trees 🌳 a whole year to absorb 1 billion tonnes of CO₂!",
    "✈️ 1 billion people flying from New York to London equals 500 millions tonnes of CO₂!",
    "🌍 The average car emits about 4.6 metric tonnes of CO₂ per year.",
    "🏡 Heating and cooling buildings accounts for about 50% of global energy use.",
]

eco_tips = [
    "💡 Switch off lights and electronics when not in use.",
    "🚴‍♂️ Walk, cycle, or carpool whenever possible.",
    "♻️ Reduce, Reuse, and Recycle — the 3 magic R's!",
    "🍃 Compost food scraps to reduce landfill emissions.",
    "🛒 Bring your own reusable bag when shopping.",
    "💧 Fix leaking taps to save thousands of liters of water yearly.",
    "🥦 Choose more plant-based meals to lower your carbon footprint.",
    "🔋 Use rechargeable batteries whenever possible.",
]

category = random.choice(["fact", "tip"])
if category == "fact":
    opening_word = "🌍 **Did You Know?**"
    random_message = random.choice(did_you_know_facts)
else:
    opening_word = "🌿 **Green Tip of the Day:**"
    random_message = random.choice(eco_tips)

with st.sidebar:
    st.info(f"{opening_word}\n\n{random_message}")
