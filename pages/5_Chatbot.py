from openai import OpenAI
import streamlit as st
from codecarbon import EmissionsTracker  # 🆕 Import CodeCarbon
import random

st.set_page_config(page_title="Chatbot", layout="centered")

# ✅ Initialize theme state once
if "theme" not in st.session_state:
    st.session_state["theme"] = "Light Mode"

# ✅ Initialize toggle state for UI control (separate from actual theme)
if "toggle_state" not in st.session_state:
    st.session_state["toggle_state"] = (st.session_state["theme"] == "Dark Mode")

# ✅ Handle toggle with rerun to ensure proper state change
new_toggle = st.toggle("Dark Mode 🌙", value=st.session_state["toggle_state"])
if new_toggle != st.session_state["toggle_state"]:
    st.session_state["toggle_state"] = new_toggle
    st.session_state["theme"] = "Dark Mode" if new_toggle else "Light Mode"
    st.rerun()

# ✅ Use the updated theme
theme = st.session_state["theme"]

# ✅ Apply the theme CSS
if theme == "Light Mode":
    st.markdown("""
        <style>
        /* Change the top header bar */
        header[data-testid="stHeader"] {
            background-color: #66bb6a;
        }
        [data-testid="stAppViewContainer"] {
            background-color: #e8ebe0;
            color: #000000;
        }
        [data-testid="stSidebar"] {
            background-color: #a5d6a7;
        }
        h1, h2, h3, h4, h5, h6, p, li, span, div {
            color: #343434 !important;
        }
        .stButton>button {
            background-color: #66bb6a;
            color: white;
        }
        .stButton>button:hover {
            background-color: #66bb6a;
            color: black;
        }
        [data-testid="stSidebar"] input {
            background-color: #d0e8d0; /* Light green background */
            color: black;
            border: 1px solid #388e3c;
            border-radius: 5px;
        }
        [data-testid="stExpander"] {
            background-color: #e0f2f1; /* light greenish-blue */
            border: 1px solid #66bb6a; /* optional: green border */
            border-radius: 10px;
        }
        </style>
    """, unsafe_allow_html=True)

with st.sidebar:
    openai_api_key = st.text_input("OpenAI API Key", key="chatbot_api_key", type="password")
    "[Get an OpenAI API key](https://platform.openai.com/account/api-keys)"

st.title("💬 Chatbot")
st.caption("🚀 A Streamlit chatbot powered by OpenAI + CodeCarbon tracking 🌱")

with st.expander("📖 Chatbot User Guide"):
    st.markdown("""
    ## ℹ️ User Guide
    ### 1. Enter Your OpenAI API Key
    To get started, enter your OpenAI API key in the input box located on the sidebar. If you don't have an API key, you can [get one here](https://platform.openai.com/account/api-keys).

    ### 2. Chat with the Assistant
    Type your message in the chat input field at the bottom of the page. The chatbot will respond using OpenAI's GPT model, providing answers based on your prompt.

    ### 3. Emissions Tracking
    - The app tracks the CO₂ emissions generated by the chatbot's responses using CodeCarbon.
    - Emissions are calculated for every response and shown after the chatbot answers.
    - **Emissions Info**: The approximate CO₂ emissions for each reply are displayed in grams, along with the total emissions so far in the session.

    ### 4. Key Features
    - **Emissions Tracking**: Monitors the carbon footprint of each chatbot interaction.
    - **Total CO₂ Emissions**: Shows the accumulated emissions from all chat responses during the session.
    - **User-Friendly Interface**: Clean design with a chat interface for easy interaction.

    ### 📊 Insights
    - **Emissions Tracking**: Each interaction comes with its own CO₂ emission data, helping you keep track of the environmental impact of using the chatbot.
    - **Theme Customization**: Choose between Light or Dark Mode to personalize the interface.

    ---
    
    💡 **Tip**: Remember to use the chatbot with an OpenAI API key to get the most accurate responses and emissions data.
    """)


if "total_emissions" not in st.session_state:
    st.session_state["total_emissions"] = 0.0

# Session state initialization
if "messages" not in st.session_state:
    st.session_state["messages"] = [{"role": "assistant", "content": "How can I help you?"}]
if "chatbot_emission" not in st.session_state:
    st.session_state["chatbot_emission"] = 0.0

# Display previous chat messages
for msg in st.session_state.messages:
    st.chat_message(msg["role"]).write(msg["content"])

# Chat input handling
if prompt := st.chat_input():
    if not openai_api_key:
        st.info("Please add your OpenAI API key to continue.")
        st.stop()

    # Initialize OpenAI client
    client = OpenAI(api_key=openai_api_key)

    # Append user's prompt to session state
    st.session_state.messages.append({"role": "user", "content": prompt})
    st.chat_message("user").write(prompt)

    # 🆕 Initialize emissions tracker here
    tracker = EmissionsTracker(
        measure_power_secs=1,
        project_name="GreenModel Chatbot",
        save_to_file=False  # No CSV file
    )

    # Start tracking
    tracker.start()

    # Get chatbot response
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=st.session_state.messages
    )

    # Get response text
    msg = response.choices[0].message.content

    # Stop tracking
    emissions = tracker.stop()

    # Add the new emissions to the total
    st.session_state["total_emissions"] += emissions


    # Update session state and display chatbot message
    st.session_state.messages.append({"role": "assistant", "content": msg})
    st.chat_message("assistant").write(msg)

    # Show both latest and total emissions
    st.success(f"🌿 This reply generated approximately **{emissions * 1000:.4f} g CO₂**.")
    st.info(f"🔋 Total emissions so far: **{st.session_state['total_emissions'] * 1000:.4f} g CO₂**.")

# List of "Did You Know?" fun facts
did_you_know_facts = [
    "🌱 It would take 45 billion trees 🌳 a whole year to absorb 1 billion tonnes of CO₂!",
    "✈️ 1 billion people flying from New York to London equals 500 millions tonnes of CO₂!",
    "🌍 The average car emits about 4.6 metric tonnes of CO₂ per year.",
    "🏡 Heating and cooling buildings accounts for about 50% of global energy use.",
]

# List of eco-friendly tips
eco_tips = [
    "💡 Switch off lights and electronics when not in use.",
    "🚴‍♂️ Walk, cycle, or carpool whenever possible.",
    "♻️ Reduce, Reuse, and Recycle — the 3 magic R's!",
    "🍃 Compost food scraps to reduce landfill emissions.",
    "🛒 Bring your own reusable bag when shopping.",
    "💧 Fix leaking taps to save thousands of liters of water yearly.",
    "🥦 Choose more plant-based meals to lower your carbon footprint.",
    "🔋 Use rechargeable batteries whenever possible.",
]

# Randomly decide whether to show a fact or a tip
category = random.choice(["fact", "tip"])

# Define the opening word based on category
if category == "fact":
    random_message = random.choice(did_you_know_facts)
    opening_word = "🌍 **Did You Know?**"
else:
    random_message = random.choice(eco_tips)
    opening_word = "🌿 **Green Tip of the Day:**"

# Display the message with the opening word in the sidebar
with st.sidebar:
    st.info(f"{opening_word}\n\n{random_message}")
