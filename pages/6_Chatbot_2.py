
from openai import OpenAI, OpenAIError
import streamlit as st
from codecarbon import EmissionsTracker  # 🆕 Import CodeCarbon
import random
from theme import apply_theme

# Constants
MAX_TOKENS = 500

st.set_page_config(page_title="Chatbot", layout="centered")

apply_theme()

with st.sidebar:
    green_mode = st.toggle("🌳 Green Model")  

    openai_api_key = st.text_input("OpenAI API Key", key="chatbot_api_key", type="password")
    "[Get an OpenAI API key](https://platform.openai.com/account/api-keys)"

st.title("💬 Chatbot Carbon Emission Tracker")
st.caption("🚀 A Streamlit chatbot powered by OpenAI + CodeCarbon tracking 🌱")

# User Guide in Expander
with st.expander("📘 Chatbot Carbon Emission Tracker User Guide"):
    st.markdown("""
                
    **🌟 Step to Use:** 
    
    1. 🔐 **Enter your OpenAI API Key** in the sidebar to enable the chatbot.
    2. 💬 Type your question in the chat input box at the bottom of the screen.
    3. 🧠 The chatbot will generate a response using OpenAI’s GPT model.
    4. 🌱 The app will:
        - Estimate the **CO₂ emissions** generated by each response using [CodeCarbon](https://mlco2.github.io/codecarbon/).
        - Display the emissions in **grams of CO₂**.
        - Update a **line chart** showing emissions history throughout the session.

    **🌳 About the Green Model Toggle:**   
    
    - You can activate **Green Model** in the sidebar using the 🌳 toggle switch.
    - When enabled, the chatbot uses a **more efficient configuration**:
        - Lower temperature and penalty values for **deterministic, concise** replies.
        - Ideal for energy-conscious usage with reduced computational overhead.
    - When disabled, the chatbot uses a **more creative configuration**, which may result in higher emissions.

    ---
    **Tips:**
    - Use short, clear prompts for best results.
    - Try sustainability-related questions like:
        - "How can I reduce my home's carbon footprint?"
        - "What are green alternatives to air travel?"
        - "Explain carbon offsetting in simple terms."
    - Use the **🌳 Green Model** toggle in the sidebar for more energy-efficient replies.
    - Shorter, more focused questions typically consume less energy.

    ✅ Use this app to explore how even digital choices can affect our environment!
    """)

# API Key Validation
client = None
if openai_api_key:
    try:
        client = OpenAI(api_key=openai_api_key)
        client.models.list()  # Validate API key
    except OpenAIError:
        st.error("❌ Invalid OpenAI API key. Please double-check and try again.")
        client = None

# Chat history init (if needed)
if "messages" not in st.session_state:
    st.session_state.messages = []

if "total_emissions" not in st.session_state:
    st.session_state["total_emissions"] = 0.0

if "emissions_over_time" not in st.session_state:
    st.session_state["emissions_over_time"] = []


# Chat input
prompt = st.chat_input("Ask something about carbon emissions...", key="chat_input")

if prompt:
    if not openai_api_key or client is None:
        st.warning("⚠️ Please enter a valid OpenAI API key in the sidebar to use the chatbot.")
        st.stop()

    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})
    st.chat_message("user").write(prompt)

    # Track emissions
    tracker = EmissionsTracker(
        project_name="GreenModel Chatbot" if green_mode else "Normal Chatbot",
        measure_power_secs=1,
        save_to_file=False
    )
    tracker.start()

    # Generate AI response
    response = client.chat.completions.create(
        model="gpt-3.5-turbo" if green_mode else "gpt-4",
        messages=st.session_state.messages,
        temperature=0.2 if green_mode else 1.0,
        max_tokens=MAX_TOKENS,
        presence_penalty=0.0 if green_mode else 1.5,
        frequency_penalty=0.0 if green_mode else 0.5
    )

    emissions = tracker.stop()
    st.session_state["emissions_over_time"].append(emissions * 1000)  # Convert to grams
    msg = response.choices[0].message.content

    # Add assistant message to history
    st.session_state.messages.append({"role": "assistant", "content": msg})
    st.chat_message("assistant").write(msg)

    # Update emissions summary
    st.session_state["total_emissions"] += emissions
    st.success(f"🌿 This reply generated approximately **{emissions * 1000:.4f} g CO₂**.")
    st.info(f"🔋 Total emissions so far: **{st.session_state['total_emissions'] * 1000:.4f} g CO₂**.")

# List of "Did You Know?" fun facts
did_you_know_facts = [
    "🌱 It would take 45 billion trees 🌳 a whole year to absorb 1 billion tonnes of CO₂!",
    "✈️ 1 billion people flying from New York to London equals 500 millions tonnes of CO₂!",
    "🌍 The average car emits about 4.6 metric tonnes of CO₂ per year.",
    "🏡 Heating and cooling buildings accounts for about 50% of global energy use.",
]

# List of eco-friendly tips
eco_tips = [
    "💡 Switch off lights and electronics when not in use.",
    "🚴‍♂️ Walk, cycle, or carpool whenever possible.",
    "♻️ Reduce, Reuse, and Recycle — the 3 magic R's!",
    "🍃 Compost food scraps to reduce landfill emissions.",
    "🛒 Bring your own reusable bag when shopping.",
    "💧 Fix leaking taps to save thousands of liters of water yearly.",
    "🥦 Choose more plant-based meals to lower your carbon footprint.",
    "🔋 Use rechargeable batteries whenever possible.",
]

# Randomly decide whether to show a fact or a tip
category = random.choice(["fact", "tip"])

# Define the opening word based on category
if category == "fact":
    random_message = random.choice(did_you_know_facts)
    opening_word = "🌍 **Did You Know?**"
else:
    random_message = random.choice(eco_tips)
    opening_word = "🌿 **Green Tip of the Day:**"

# Display the message with the opening word in the sidebar
with st.sidebar:
    st.info(f"{opening_word}\n\n{random_message}")
    
    # Emissions over time chart
    if st.session_state["emissions_over_time"]:
        st.subheader("📈 Carbon Emissions per Chat Response")
        st.line_chart({
            "CO₂ Emissions (g)": st.session_state["emissions_over_time"]
        })
